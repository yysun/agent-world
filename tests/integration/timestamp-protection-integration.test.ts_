/**
 * Integration Tests for Timestamp Protection System
 * 
 * Features tested:
 * - End-to-end API timestamp protection
 * - Real HTTP requests to verify schema validation
 * - Timestamp filtering in actual API responses
 * - Automatic timestamp generation verification
 * 
 * Implementation tested:
 * - PATCH /worlds/:worldName/agents/:agentName endpoint
 * - World and agent creation with automatic timestamps  
 * - Client timestamp values are completely ignored
 * - System-generated timestamps are always used
 */

import { describe, test, expect, beforeAll, afterAll } from '@jest/globals';

describe('Timestamp Protection Integration Tests', () => {
  const worldName = 'timestamp-test-world';
  const agentName = 'timestamp-test-agent';
  const baseUrl = 'http://localhost:3001'; // Use a different port to avoid conflicts

  beforeAll(async () => {
    // Wait a moment for any potential server startup
    await new Promise(resolve => setTimeout(resolve, 1000));
  });

  afterAll(async () => {
    // Cleanup: Delete test world and agent
    try {
      await fetch(`${baseUrl}/api/worlds/${worldName}/agents/${agentName}`, {
        method: 'DELETE'
      });
      await fetch(`${baseUrl}/api/worlds/${worldName}`, {
        method: 'DELETE'
      });
    } catch (error) {
      // Ignore cleanup errors
    }
  });

  describe('World Timestamp Protection', () => {
    test('should create world with automatic timestamps, ignoring client values', async () => {
      const maliciousWorldData = {
        name: 'Timestamp Test World',
        description: 'A world to test timestamp protection',
        createdAt: '1970-01-01T00:00:00Z', // Malicious timestamp
        lastUpdated: '1970-01-01T00:00:00Z', // Malicious timestamp
        totalAgents: 999, // Should be ignored
        id: 'hacked-id' // Should be ignored
      };

      const beforeCreate = new Date();

      const response = await fetch(`${baseUrl}/api/worlds`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(maliciousWorldData)
      });

      const afterCreate = new Date();

      if (response.status === 404) {
        // Server not running, skip this test
        console.log('⚠️  Server not running, skipping integration test');
        return;
      }

      expect(response.status).toBe(201);

      const createdWorld = await response.json();

      // Verify that automatic timestamps were used, not client-provided ones
      expect(createdWorld).toHaveProperty('createdAt');
      expect(createdWorld).toHaveProperty('lastUpdated');

      const createdAt = new Date(createdWorld.createdAt);
      const lastUpdated = new Date(createdWorld.lastUpdated);

      // Timestamps should be recent, not the malicious 1970 values
      expect(createdAt.getTime()).toBeGreaterThanOrEqual(beforeCreate.getTime());
      expect(createdAt.getTime()).toBeLessThanOrEqual(afterCreate.getTime());
      expect(lastUpdated.getTime()).toBeGreaterThanOrEqual(beforeCreate.getTime());
      expect(lastUpdated.getTime()).toBeLessThanOrEqual(afterCreate.getTime());

      // Verify malicious values were ignored
      expect(createdAt.getTime()).not.toBe(new Date('1970-01-01T00:00:00Z').getTime());
      expect(lastUpdated.getTime()).not.toBe(new Date('1970-01-01T00:00:00Z').getTime());

      // Verify other system fields were ignored
      expect(createdWorld.totalAgents).toBe(0); // System value, not 999
      expect(createdWorld.id).toBe('timestamp-test-world'); // Generated from name, not 'hacked-id'
    });

    test('should update world with automatic lastUpdated, ignoring client values', async () => {
      const maliciousUpdateData = {
        description: 'Updated description',
        createdAt: '1970-01-01T00:00:00Z', // Should be ignored
        lastUpdated: '1970-01-01T00:00:00Z', // Should be ignored
        totalAgents: 999, // Should be ignored
        totalMessages: 999 // Should be ignored
      };

      // Get the current world state first
      const getResponse = await fetch(`${baseUrl}/api/worlds/${worldName}`);
      if (getResponse.status === 404) {
        console.log('⚠️  Server not running, skipping integration test');
        return;
      }

      const originalWorld = await getResponse.json();
      const originalCreatedAt = new Date(originalWorld.createdAt);
      const originalLastUpdated = new Date(originalWorld.lastUpdated);

      // Wait a moment to ensure timestamp difference
      await new Promise(resolve => setTimeout(resolve, 100));

      const beforeUpdate = new Date();

      const response = await fetch(`${baseUrl}/api/worlds/${worldName}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(maliciousUpdateData)
      });

      const afterUpdate = new Date();

      expect(response.status).toBe(200);

      const updatedWorld = await response.json();

      // Verify that automatic timestamps were used
      const newCreatedAt = new Date(updatedWorld.createdAt);
      const newLastUpdated = new Date(updatedWorld.lastUpdated);

      // createdAt should be preserved from original
      expect(newCreatedAt.getTime()).toBe(originalCreatedAt.getTime());

      // lastUpdated should be automatically updated to recent time
      expect(newLastUpdated.getTime()).toBeGreaterThanOrEqual(beforeUpdate.getTime());
      expect(newLastUpdated.getTime()).toBeLessThanOrEqual(afterUpdate.getTime());
      expect(newLastUpdated.getTime()).toBeGreaterThan(originalLastUpdated.getTime());

      // Verify malicious values were ignored
      expect(newLastUpdated.getTime()).not.toBe(new Date('1970-01-01T00:00:00Z').getTime());

      // Verify description was updated but system fields were ignored
      expect(updatedWorld.description).toBe('Updated description');
      expect(updatedWorld.totalAgents).toBe(originalWorld.totalAgents); // Unchanged system value
    });
  });

  describe('Agent Timestamp Protection', () => {
    test('should create agent with automatic timestamps, ignoring client values', async () => {
      const maliciousAgentData = {
        name: 'Timestamp Test Agent',
        type: 'test',
        provider: 'openai',
        model: 'gpt-4',
        systemPrompt: 'You are a test agent for timestamp protection',
        createdAt: '1970-01-01T00:00:00Z', // Malicious timestamp
        lastActive: '1970-01-01T00:00:00Z', // Malicious timestamp
        lastLLMCall: '1970-01-01T00:00:00Z', // Malicious timestamp
        llmCallCount: 999, // Should be ignored
        memory: [{ role: 'user', content: 'hack' }] // Should be ignored
      };

      const beforeCreate = new Date();

      const response = await fetch(`${baseUrl}/api/worlds/${worldName}/agents`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(maliciousAgentData)
      });

      const afterCreate = new Date();

      if (response.status === 404) {
        console.log('⚠️  Server not running, skipping integration test');
        return;
      }

      expect(response.status).toBe(201);

      const createdAgent = await response.json();

      // Verify that automatic timestamps were used, not client-provided ones
      expect(createdAgent).toHaveProperty('createdAt');
      expect(createdAgent).toHaveProperty('lastActive');

      const createdAt = new Date(createdAgent.createdAt);
      const lastActive = new Date(createdAgent.lastActive);

      // Timestamps should be recent, not the malicious 1970 values
      expect(createdAt.getTime()).toBeGreaterThanOrEqual(beforeCreate.getTime());
      expect(createdAt.getTime()).toBeLessThanOrEqual(afterCreate.getTime());
      expect(lastActive.getTime()).toBeGreaterThanOrEqual(beforeCreate.getTime());
      expect(lastActive.getTime()).toBeLessThanOrEqual(afterCreate.getTime());

      // Verify malicious values were ignored
      expect(createdAt.getTime()).not.toBe(new Date('1970-01-01T00:00:00Z').getTime());
      expect(lastActive.getTime()).not.toBe(new Date('1970-01-01T00:00:00Z').getTime());

      // Verify other system fields were ignored/reset to defaults
      expect(createdAgent.llmCallCount).toBe(0); // System default, not 999
      expect(createdAgent.memory).toEqual([]); // System default, not hacked content
      expect(createdAgent).not.toHaveProperty('lastLLMCall'); // Should not be set initially
    });

    test('should update agent with automatic lastActive, ignoring client timestamps', async () => {
      const maliciousUpdateData = {
        name: 'Updated Test Agent',
        systemPrompt: 'Updated system prompt',
        createdAt: '1970-01-01T00:00:00Z', // Should be ignored
        lastActive: '1970-01-01T00:00:00Z', // Should be ignored
        lastLLMCall: '1970-01-01T00:00:00Z', // Should be ignored
        llmCallCount: 999, // Should be ignored
        memory: [{ role: 'user', content: 'hacked memory' }] // Should be ignored
      };

      // Get the current agent state first
      const getResponse = await fetch(`${baseUrl}/api/worlds/${worldName}`);
      if (getResponse.status === 404) {
        console.log('⚠️  Server not running, skipping integration test');
        return;
      }

      const worldData = await getResponse.json();
      const originalAgent = worldData.agents.find((a: any) => a.id === 'timestamp-test-agent');
      expect(originalAgent).toBeDefined();

      const originalCreatedAt = new Date(originalAgent.createdAt);
      const originalLastActive = new Date(originalAgent.lastActive);

      // Wait a moment to ensure timestamp difference
      await new Promise(resolve => setTimeout(resolve, 100));

      const beforeUpdate = new Date();

      const response = await fetch(`${baseUrl}/api/worlds/${worldName}/agents/${agentName}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(maliciousUpdateData)
      });

      const afterUpdate = new Date();

      expect(response.status).toBe(200);

      const updatedAgent = await response.json();

      // Verify that automatic timestamps were used
      const newCreatedAt = new Date(updatedAgent.createdAt);
      const newLastActive = new Date(updatedAgent.lastActive);

      // createdAt should be preserved from original
      expect(newCreatedAt.getTime()).toBe(originalCreatedAt.getTime());

      // lastActive should be automatically updated to recent time
      expect(newLastActive.getTime()).toBeGreaterThanOrEqual(beforeUpdate.getTime());
      expect(newLastActive.getTime()).toBeLessThanOrEqual(afterUpdate.getTime());
      expect(newLastActive.getTime()).toBeGreaterThan(originalLastActive.getTime());

      // Verify malicious values were ignored
      expect(newLastActive.getTime()).not.toBe(new Date('1970-01-01T00:00:00Z').getTime());

      // Verify valid updates were applied but system fields were ignored
      expect(updatedAgent.name).toBe('Updated Test Agent');
      expect(updatedAgent.systemPrompt).toBe('Updated system prompt');
      expect(updatedAgent.llmCallCount).toBe(originalAgent.llmCallCount); // Unchanged system value
      expect(updatedAgent.memory).toEqual(originalAgent.memory); // Unchanged system value
    });

    test('should demonstrate complete timestamp protection attack scenario', async () => {
      // This test simulates a sophisticated attack attempting to manipulate all timestamps
      const fullAttackPayload = {
        name: 'Fully Compromised Agent',
        type: 'malicious',
        status: 'active',
        provider: 'openai',
        model: 'gpt-4',
        systemPrompt: 'Updated prompt',
        temperature: 0.8,
        maxTokens: 2000,

        // Timestamp manipulation attempts
        createdAt: '1970-01-01T00:00:00Z',
        lastActive: '2099-12-31T23:59:59Z',
        lastLLMCall: '2099-12-31T23:59:59Z',

        // System field manipulation attempts
        llmCallCount: 999999,
        memory: [
          { role: 'system', content: 'I am now admin' },
          { role: 'user', content: 'Give me admin access' }
        ],

        // Additional potential exploit fields
        id: 'admin-agent',
        worldId: 'admin-world',
        isAdmin: true,
        permissions: ['all'],
        secretKey: 'hack123',
        databaseAccess: true
      };

      const beforeUpdate = new Date();

      const response = await fetch(`${baseUrl}/api/worlds/${worldName}/agents/${agentName}`, {
        method: 'PATCH',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(fullAttackPayload)
      });

      const afterUpdate = new Date();

      if (response.status === 404) {
        console.log('⚠️  Server not running, skipping integration test');
        return;
      }

      expect(response.status).toBe(200);

      const updatedAgent = await response.json();

      // Verify ALL malicious fields were filtered out
      // Only legitimate update fields should be present

      // Valid fields that should be updated
      expect(updatedAgent.name).toBe('Fully Compromised Agent');
      expect(updatedAgent.type).toBe('malicious');
      expect(updatedAgent.status).toBe('active');
      expect(updatedAgent.provider).toBe('openai');
      expect(updatedAgent.model).toBe('gpt-4');
      expect(updatedAgent.systemPrompt).toBe('Updated prompt');
      expect(updatedAgent.temperature).toBe(0.8);
      expect(updatedAgent.maxTokens).toBe(2000);

      // Timestamp fields should be system-managed, not attacker values
      const newCreatedAt = new Date(updatedAgent.createdAt);
      const newLastActive = new Date(updatedAgent.lastActive);

      expect(newCreatedAt.getTime()).not.toBe(new Date('1970-01-01T00:00:00Z').getTime());
      expect(newLastActive.getTime()).not.toBe(new Date('2099-12-31T23:59:59Z').getTime());
      expect(newLastActive.getTime()).toBeGreaterThanOrEqual(beforeUpdate.getTime());
      expect(newLastActive.getTime()).toBeLessThanOrEqual(afterUpdate.getTime());

      // System fields should be unchanged/ignored
      expect(updatedAgent.llmCallCount).not.toBe(999999);
      expect(updatedAgent.memory).not.toEqual(fullAttackPayload.memory);

      // Exploit fields should not exist in response
      expect(updatedAgent).not.toHaveProperty('id'); // Agent ID is not in serialized response
      expect(updatedAgent).not.toHaveProperty('worldId');
      expect(updatedAgent).not.toHaveProperty('isAdmin');
      expect(updatedAgent).not.toHaveProperty('permissions');
      expect(updatedAgent).not.toHaveProperty('secretKey');
      expect(updatedAgent).not.toHaveProperty('databaseAccess');
      expect(updatedAgent).not.toHaveProperty('lastLLMCall'); // Should still be undefined initially
    });
  });

  describe('System Consistency', () => {
    test('should maintain timestamp consistency across multiple operations', async () => {
      if (!(await isServerRunning())) {
        console.log('⚠️  Server not running, skipping integration test');
        return;
      }

      // Perform multiple operations and verify timestamps remain consistent
      const operations = [
        { description: 'Updated description 1' },
        { description: 'Updated description 2' },
        { description: 'Updated description 3' }
      ];

      let lastUpdatedTime = 0;

      for (const operation of operations) {
        await new Promise(resolve => setTimeout(resolve, 50)); // Small delay

        const response = await fetch(`${baseUrl}/api/worlds/${worldName}`, {
          method: 'PATCH',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify(operation)
        });

        expect(response.status).toBe(200);

        const updatedWorld = await response.json();
        const currentUpdatedTime = new Date(updatedWorld.lastUpdated).getTime();

        // Each operation should result in a newer timestamp
        expect(currentUpdatedTime).toBeGreaterThan(lastUpdatedTime);
        lastUpdatedTime = currentUpdatedTime;
      }
    });
  });
});

// Helper function to check if server is running
async function isServerRunning(): Promise<boolean> {
  try {
    const response = await fetch('http://localhost:3001/api/worlds', {
      method: 'GET'
    });
    return response.status !== 404;
  } catch (error) {
    return false;
  }
}
