/*
 * Add Command - Agent Creation
 * 
 * Features:
 * - Interactive agent creation with customizable parameters
 * - Support for different agent types and configurations
 * - Validation and error handling for agent creation
 * 
 * Logic:
 * - Parses command arguments for agent parameters
 * - Creates new agent through World.getAgentManager()
 * - Provides default values for missing parameters
 * - Reports creation status and agent details
 * 
 * Changes:
 * - Updated to use World object instead of direct AgentManager access
 * - Uses CreateAgentRequest interface for proper type safety
 * - Agent properties accessed through agent.config structure
 */

import * as World from '../../src/world';
import { colors } from '../utils/colors';
import { AgentConfig, LLMProvider } from '../../src/types';

export async function addCommand(args: string[], worldId: string): Promise<void> {
  try {
    // Parse arguments: type, name, description
    const [type = 'assistant', name, ...descriptionParts] = args;
    const description = descriptionParts.join(' ') || `A ${type} agent`;

    const agentName = name || `${type.charAt(0).toUpperCase() + type.slice(1)}-${Date.now()}`;

    console.log(colors.blue(`Creating ${type} agent: ${agentName}...`));

    const agentConfig: AgentConfig = {
      id: '', // Will be generated by createAgent
      name: agentName,
      type: type,
      provider: LLMProvider.OPENAI,
      model: 'gpt-3.5-turbo',
      personality: `You are a helpful ${type} agent. ${description}`,
      instructions: `You are a helpful ${type} agent. ${description}`,
      temperature: 0.7,
      maxTokens: 1000
    };

    const agent = World.createAgent(worldId, agentConfig);

    if (!agent) {
      throw new Error('Failed to create agent');
    }

    console.log(colors.green(`âœ“ Successfully created agent:`));
    console.log(colors.gray(`  Name: ${agent.name}`));
    console.log(colors.gray(`  ID: ${agent.id}`));
    console.log(colors.gray(`  Status: ${agent.status}`));

  } catch (error) {
    console.log(colors.red(`Failed to create agent: ${error}`));
  }
}
